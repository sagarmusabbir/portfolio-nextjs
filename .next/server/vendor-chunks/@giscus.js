"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@giscus";
exports.ids = ["vendor-chunks/@giscus"];
exports.modules = {

/***/ "(ssr)/./node_modules/@giscus/react/dist/giscus-1126a0a1.js":
/*!************************************************************!*\
  !*** ./node_modules/@giscus/react/dist/giscus-1126a0a1.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, Symbol.toStringTag, {\n    value: \"Module\"\n}); /**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst M = window, F = M.ShadowRoot && (M.ShadyCSS === void 0 || M.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype, Q = Symbol(), Z = new WeakMap;\nlet ct = class {\n    constructor(t, e, s){\n        if (this._$cssResult$ = !0, s !== Q) throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n        this.cssText = t, this.t = e;\n    }\n    get styleSheet() {\n        let t = this.o;\n        const e = this.t;\n        if (F && t === void 0) {\n            const s = e !== void 0 && e.length === 1;\n            s && (t = Z.get(e)), t === void 0 && ((this.o = t = new CSSStyleSheet).replaceSync(this.cssText), s && Z.set(e, t));\n        }\n        return t;\n    }\n    toString() {\n        return this.cssText;\n    }\n};\nconst _t = (i)=>new ct(typeof i == \"string\" ? i : i + \"\", void 0, Q), vt = (i, ...t)=>{\n    const e = i.length === 1 ? i[0] : t.reduce((s, n, r)=>s + ((o)=>{\n            if (o._$cssResult$ === !0) return o.cssText;\n            if (typeof o == \"number\") return o;\n            throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + o + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n        })(n) + i[r + 1], i[0]);\n    return new ct(e, i, Q);\n}, ft = (i, t)=>{\n    F ? i.adoptedStyleSheets = t.map((e)=>e instanceof CSSStyleSheet ? e : e.styleSheet) : t.forEach((e)=>{\n        const s = document.createElement(\"style\"), n = M.litNonce;\n        n !== void 0 && s.setAttribute(\"nonce\", n), s.textContent = e.cssText, i.appendChild(s);\n    });\n}, X = F ? (i)=>i : (i)=>i instanceof CSSStyleSheet ? ((t)=>{\n        let e = \"\";\n        for (const s of t.cssRules)e += s.cssText;\n        return _t(e);\n    })(i) : i; /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nvar L;\nconst H = window, tt = H.trustedTypes, mt = tt ? tt.emptyScript : \"\", et = H.reactiveElementPolyfillSupport, Y = {\n    toAttribute (i, t) {\n        switch(t){\n            case Boolean:\n                i = i ? mt : null;\n                break;\n            case Object:\n            case Array:\n                i = i == null ? i : JSON.stringify(i);\n        }\n        return i;\n    },\n    fromAttribute (i, t) {\n        let e = i;\n        switch(t){\n            case Boolean:\n                e = i !== null;\n                break;\n            case Number:\n                e = i === null ? null : Number(i);\n                break;\n            case Object:\n            case Array:\n                try {\n                    e = JSON.parse(i);\n                } catch  {\n                    e = null;\n                }\n        }\n        return e;\n    }\n}, dt = (i, t)=>t !== i && (t == t || i == i), W = {\n    attribute: !0,\n    type: String,\n    converter: Y,\n    reflect: !1,\n    hasChanged: dt\n}, q = \"finalized\";\nlet y = class extends HTMLElement {\n    constructor(){\n        super(), this._$Ei = new Map, this.isUpdatePending = !1, this.hasUpdated = !1, this._$El = null, this.u();\n    }\n    static addInitializer(t) {\n        var e;\n        this.finalize(), ((e = this.h) !== null && e !== void 0 ? e : this.h = []).push(t);\n    }\n    static get observedAttributes() {\n        this.finalize();\n        const t = [];\n        return this.elementProperties.forEach((e, s)=>{\n            const n = this._$Ep(s, e);\n            n !== void 0 && (this._$Ev.set(n, s), t.push(n));\n        }), t;\n    }\n    static createProperty(t, e = W) {\n        if (e.state && (e.attribute = !1), this.finalize(), this.elementProperties.set(t, e), !e.noAccessor && !this.prototype.hasOwnProperty(t)) {\n            const s = typeof t == \"symbol\" ? Symbol() : \"__\" + t, n = this.getPropertyDescriptor(t, s, e);\n            n !== void 0 && Object.defineProperty(this.prototype, t, n);\n        }\n    }\n    static getPropertyDescriptor(t, e, s) {\n        return {\n            get () {\n                return this[e];\n            },\n            set (n) {\n                const r = this[t];\n                this[e] = n, this.requestUpdate(t, r, s);\n            },\n            configurable: !0,\n            enumerable: !0\n        };\n    }\n    static getPropertyOptions(t) {\n        return this.elementProperties.get(t) || W;\n    }\n    static finalize() {\n        if (this.hasOwnProperty(q)) return !1;\n        this[q] = !0;\n        const t = Object.getPrototypeOf(this);\n        if (t.finalize(), t.h !== void 0 && (this.h = [\n            ...t.h\n        ]), this.elementProperties = new Map(t.elementProperties), this._$Ev = new Map, this.hasOwnProperty(\"properties\")) {\n            const e = this.properties, s = [\n                ...Object.getOwnPropertyNames(e),\n                ...Object.getOwnPropertySymbols(e)\n            ];\n            for (const n of s)this.createProperty(n, e[n]);\n        }\n        return this.elementStyles = this.finalizeStyles(this.styles), !0;\n    }\n    static finalizeStyles(t) {\n        const e = [];\n        if (Array.isArray(t)) {\n            const s = new Set(t.flat(1 / 0).reverse());\n            for (const n of s)e.unshift(X(n));\n        } else t !== void 0 && e.push(X(t));\n        return e;\n    }\n    static _$Ep(t, e) {\n        const s = e.attribute;\n        return s === !1 ? void 0 : typeof s == \"string\" ? s : typeof t == \"string\" ? t.toLowerCase() : void 0;\n    }\n    u() {\n        var t;\n        this._$E_ = new Promise((e)=>this.enableUpdating = e), this._$AL = new Map, this._$Eg(), this.requestUpdate(), (t = this.constructor.h) === null || t === void 0 || t.forEach((e)=>e(this));\n    }\n    addController(t) {\n        var e, s;\n        ((e = this._$ES) !== null && e !== void 0 ? e : this._$ES = []).push(t), this.renderRoot !== void 0 && this.isConnected && ((s = t.hostConnected) === null || s === void 0 || s.call(t));\n    }\n    removeController(t) {\n        var e;\n        (e = this._$ES) === null || e === void 0 || e.splice(this._$ES.indexOf(t) >>> 0, 1);\n    }\n    _$Eg() {\n        this.constructor.elementProperties.forEach((t, e)=>{\n            this.hasOwnProperty(e) && (this._$Ei.set(e, this[e]), delete this[e]);\n        });\n    }\n    createRenderRoot() {\n        var t;\n        const e = (t = this.shadowRoot) !== null && t !== void 0 ? t : this.attachShadow(this.constructor.shadowRootOptions);\n        return ft(e, this.constructor.elementStyles), e;\n    }\n    connectedCallback() {\n        var t;\n        this.renderRoot === void 0 && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(!0), (t = this._$ES) === null || t === void 0 || t.forEach((e)=>{\n            var s;\n            return (s = e.hostConnected) === null || s === void 0 ? void 0 : s.call(e);\n        });\n    }\n    enableUpdating(t) {}\n    disconnectedCallback() {\n        var t;\n        (t = this._$ES) === null || t === void 0 || t.forEach((e)=>{\n            var s;\n            return (s = e.hostDisconnected) === null || s === void 0 ? void 0 : s.call(e);\n        });\n    }\n    attributeChangedCallback(t, e, s) {\n        this._$AK(t, s);\n    }\n    _$EO(t, e, s = W) {\n        var n;\n        const r = this.constructor._$Ep(t, s);\n        if (r !== void 0 && s.reflect === !0) {\n            const o = (((n = s.converter) === null || n === void 0 ? void 0 : n.toAttribute) !== void 0 ? s.converter : Y).toAttribute(e, s.type);\n            this._$El = t, o == null ? this.removeAttribute(r) : this.setAttribute(r, o), this._$El = null;\n        }\n    }\n    _$AK(t, e) {\n        var s;\n        const n = this.constructor, r = n._$Ev.get(t);\n        if (r !== void 0 && this._$El !== r) {\n            const o = n.getPropertyOptions(r), c = typeof o.converter == \"function\" ? {\n                fromAttribute: o.converter\n            } : ((s = o.converter) === null || s === void 0 ? void 0 : s.fromAttribute) !== void 0 ? o.converter : Y;\n            this._$El = r, this[r] = c.fromAttribute(e, o.type), this._$El = null;\n        }\n    }\n    requestUpdate(t, e, s) {\n        let n = !0;\n        t !== void 0 && (((s = s || this.constructor.getPropertyOptions(t)).hasChanged || dt)(this[t], e) ? (this._$AL.has(t) || this._$AL.set(t, e), s.reflect === !0 && this._$El !== t && (this._$EC === void 0 && (this._$EC = new Map), this._$EC.set(t, s))) : n = !1), !this.isUpdatePending && n && (this._$E_ = this._$Ej());\n    }\n    async _$Ej() {\n        this.isUpdatePending = !0;\n        try {\n            await this._$E_;\n        } catch (e) {\n            Promise.reject(e);\n        }\n        const t = this.scheduleUpdate();\n        return t != null && await t, !this.isUpdatePending;\n    }\n    scheduleUpdate() {\n        return this.performUpdate();\n    }\n    performUpdate() {\n        var t;\n        if (!this.isUpdatePending) return;\n        this.hasUpdated, this._$Ei && (this._$Ei.forEach((n, r)=>this[r] = n), this._$Ei = void 0);\n        let e = !1;\n        const s = this._$AL;\n        try {\n            e = this.shouldUpdate(s), e ? (this.willUpdate(s), (t = this._$ES) === null || t === void 0 || t.forEach((n)=>{\n                var r;\n                return (r = n.hostUpdate) === null || r === void 0 ? void 0 : r.call(n);\n            }), this.update(s)) : this._$Ek();\n        } catch (n) {\n            throw e = !1, this._$Ek(), n;\n        }\n        e && this._$AE(s);\n    }\n    willUpdate(t) {}\n    _$AE(t) {\n        var e;\n        (e = this._$ES) === null || e === void 0 || e.forEach((s)=>{\n            var n;\n            return (n = s.hostUpdated) === null || n === void 0 ? void 0 : n.call(s);\n        }), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);\n    }\n    _$Ek() {\n        this._$AL = new Map, this.isUpdatePending = !1;\n    }\n    get updateComplete() {\n        return this.getUpdateComplete();\n    }\n    getUpdateComplete() {\n        return this._$E_;\n    }\n    shouldUpdate(t) {\n        return !0;\n    }\n    update(t) {\n        this._$EC !== void 0 && (this._$EC.forEach((e, s)=>this._$EO(s, this[s], e)), this._$EC = void 0), this._$Ek();\n    }\n    updated(t) {}\n    firstUpdated(t) {}\n};\ny[q] = !0, y.elementProperties = new Map, y.elementStyles = [], y.shadowRootOptions = {\n    mode: \"open\"\n}, et == null || et({\n    ReactiveElement: y\n}), ((L = H.reactiveElementVersions) !== null && L !== void 0 ? L : H.reactiveElementVersions = []).push(\"1.6.2\"); /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nvar D;\nconst x = window, S = x.trustedTypes, st = S ? S.createPolicy(\"lit-html\", {\n    createHTML: (i)=>i\n}) : void 0, J = \"$lit$\", v = `lit$${(Math.random() + \"\").slice(9)}$`, ut = \"?\" + v, At = `<${ut}>`, A = document, N = ()=>A.createComment(\"\"), O = (i)=>i === null || typeof i != \"object\" && typeof i != \"function\", pt = Array.isArray, yt = (i)=>pt(i) || typeof (i == null ? void 0 : i[Symbol.iterator]) == \"function\", z = `[ \t\n\\f\\r]`, C = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g, it = /-->/g, nt = />/g, f = RegExp(`>|${z}(?:([^\\\\s\"'>=/]+)(${z}*=${z}*(?:[^ \t\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`, \"g\"), rt = /'/g, ot = /\"/g, $t = /^(?:script|style|textarea|title)$/i, St = (i)=>(t, ...e)=>({\n            _$litType$: i,\n            strings: t,\n            values: e\n        }), Et = St(1), E = Symbol.for(\"lit-noChange\"), u = Symbol.for(\"lit-nothing\"), lt = new WeakMap, m = A.createTreeWalker(A, 129, null, !1), bt = (i, t)=>{\n    const e = i.length - 1, s = [];\n    let n, r = t === 2 ? \"<svg>\" : \"\", o = C;\n    for(let l = 0; l < e; l++){\n        const h = i[l];\n        let _, a, d = -1, g = 0;\n        for(; g < h.length && (o.lastIndex = g, a = o.exec(h), a !== null);)g = o.lastIndex, o === C ? a[1] === \"!--\" ? o = it : a[1] !== void 0 ? o = nt : a[2] !== void 0 ? ($t.test(a[2]) && (n = RegExp(\"</\" + a[2], \"g\")), o = f) : a[3] !== void 0 && (o = f) : o === f ? a[0] === \">\" ? (o = n ?? C, d = -1) : a[1] === void 0 ? d = -2 : (d = o.lastIndex - a[2].length, _ = a[1], o = a[3] === void 0 ? f : a[3] === '\"' ? ot : rt) : o === ot || o === rt ? o = f : o === it || o === nt ? o = C : (o = f, n = void 0);\n        const R = o === f && i[l + 1].startsWith(\"/>\") ? \" \" : \"\";\n        r += o === C ? h + At : d >= 0 ? (s.push(_), h.slice(0, d) + J + h.slice(d) + v + R) : h + v + (d === -2 ? (s.push(void 0), l) : R);\n    }\n    const c = r + (i[e] || \"<?>\") + (t === 2 ? \"</svg>\" : \"\");\n    if (!Array.isArray(i) || !i.hasOwnProperty(\"raw\")) throw Error(\"invalid template strings array\");\n    return [\n        st !== void 0 ? st.createHTML(c) : c,\n        s\n    ];\n};\nclass P {\n    constructor({ strings: t, _$litType$: e }, s){\n        let n;\n        this.parts = [];\n        let r = 0, o = 0;\n        const c = t.length - 1, l = this.parts, [h, _] = bt(t, e);\n        if (this.el = P.createElement(h, s), m.currentNode = this.el.content, e === 2) {\n            const a = this.el.content, d = a.firstChild;\n            d.remove(), a.append(...d.childNodes);\n        }\n        for(; (n = m.nextNode()) !== null && l.length < c;){\n            if (n.nodeType === 1) {\n                if (n.hasAttributes()) {\n                    const a = [];\n                    for (const d of n.getAttributeNames())if (d.endsWith(J) || d.startsWith(v)) {\n                        const g = _[o++];\n                        if (a.push(d), g !== void 0) {\n                            const R = n.getAttribute(g.toLowerCase() + J).split(v), I = /([.?@])?(.*)/.exec(g);\n                            l.push({\n                                type: 1,\n                                index: r,\n                                name: I[2],\n                                strings: R,\n                                ctor: I[1] === \".\" ? wt : I[1] === \"?\" ? Nt : I[1] === \"@\" ? Ot : k\n                            });\n                        } else l.push({\n                            type: 6,\n                            index: r\n                        });\n                    }\n                    for (const d of a)n.removeAttribute(d);\n                }\n                if ($t.test(n.tagName)) {\n                    const a = n.textContent.split(v), d = a.length - 1;\n                    if (d > 0) {\n                        n.textContent = S ? S.emptyScript : \"\";\n                        for(let g = 0; g < d; g++)n.append(a[g], N()), m.nextNode(), l.push({\n                            type: 2,\n                            index: ++r\n                        });\n                        n.append(a[d], N());\n                    }\n                }\n            } else if (n.nodeType === 8) if (n.data === ut) l.push({\n                type: 2,\n                index: r\n            });\n            else {\n                let a = -1;\n                for(; (a = n.data.indexOf(v, a + 1)) !== -1;)l.push({\n                    type: 7,\n                    index: r\n                }), a += v.length - 1;\n            }\n            r++;\n        }\n    }\n    static createElement(t, e) {\n        const s = A.createElement(\"template\");\n        return s.innerHTML = t, s;\n    }\n}\nfunction b(i, t, e = i, s) {\n    var n, r, o, c;\n    if (t === E) return t;\n    let l = s !== void 0 ? (n = e._$Co) === null || n === void 0 ? void 0 : n[s] : e._$Cl;\n    const h = O(t) ? void 0 : t._$litDirective$;\n    return (l == null ? void 0 : l.constructor) !== h && ((r = l == null ? void 0 : l._$AO) === null || r === void 0 || r.call(l, !1), h === void 0 ? l = void 0 : (l = new h(i), l._$AT(i, e, s)), s !== void 0 ? ((o = (c = e)._$Co) !== null && o !== void 0 ? o : c._$Co = [])[s] = l : e._$Cl = l), l !== void 0 && (t = b(i, l._$AS(i, t.values), l, s)), t;\n}\nlet Ct = class {\n    constructor(t, e){\n        this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = e;\n    }\n    get parentNode() {\n        return this._$AM.parentNode;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    u(t) {\n        var e;\n        const { el: { content: s }, parts: n } = this._$AD, r = ((e = t == null ? void 0 : t.creationScope) !== null && e !== void 0 ? e : A).importNode(s, !0);\n        m.currentNode = r;\n        let o = m.nextNode(), c = 0, l = 0, h = n[0];\n        for(; h !== void 0;){\n            if (c === h.index) {\n                let _;\n                h.type === 2 ? _ = new T(o, o.nextSibling, this, t) : h.type === 1 ? _ = new h.ctor(o, h.name, h.strings, this, t) : h.type === 6 && (_ = new Pt(o, this, t)), this._$AV.push(_), h = n[++l];\n            }\n            c !== (h == null ? void 0 : h.index) && (o = m.nextNode(), c++);\n        }\n        return m.currentNode = A, r;\n    }\n    v(t) {\n        let e = 0;\n        for (const s of this._$AV)s !== void 0 && (s.strings !== void 0 ? (s._$AI(t, s, e), e += s.strings.length - 2) : s._$AI(t[e])), e++;\n    }\n};\nclass T {\n    constructor(t, e, s, n){\n        var r;\n        this.type = 2, this._$AH = u, this._$AN = void 0, this._$AA = t, this._$AB = e, this._$AM = s, this.options = n, this._$Cp = (r = n == null ? void 0 : n.isConnected) === null || r === void 0 || r;\n    }\n    get _$AU() {\n        var t, e;\n        return (e = (t = this._$AM) === null || t === void 0 ? void 0 : t._$AU) !== null && e !== void 0 ? e : this._$Cp;\n    }\n    get parentNode() {\n        let t = this._$AA.parentNode;\n        const e = this._$AM;\n        return e !== void 0 && (t == null ? void 0 : t.nodeType) === 11 && (t = e.parentNode), t;\n    }\n    get startNode() {\n        return this._$AA;\n    }\n    get endNode() {\n        return this._$AB;\n    }\n    _$AI(t, e = this) {\n        t = b(this, t, e), O(t) ? t === u || t == null || t === \"\" ? (this._$AH !== u && this._$AR(), this._$AH = u) : t !== this._$AH && t !== E && this._(t) : t._$litType$ !== void 0 ? this.g(t) : t.nodeType !== void 0 ? this.$(t) : yt(t) ? this.T(t) : this._(t);\n    }\n    k(t) {\n        return this._$AA.parentNode.insertBefore(t, this._$AB);\n    }\n    $(t) {\n        this._$AH !== t && (this._$AR(), this._$AH = this.k(t));\n    }\n    _(t) {\n        this._$AH !== u && O(this._$AH) ? this._$AA.nextSibling.data = t : this.$(A.createTextNode(t)), this._$AH = t;\n    }\n    g(t) {\n        var e;\n        const { values: s, _$litType$: n } = t, r = typeof n == \"number\" ? this._$AC(t) : (n.el === void 0 && (n.el = P.createElement(n.h, this.options)), n);\n        if (((e = this._$AH) === null || e === void 0 ? void 0 : e._$AD) === r) this._$AH.v(s);\n        else {\n            const o = new Ct(r, this), c = o.u(this.options);\n            o.v(s), this.$(c), this._$AH = o;\n        }\n    }\n    _$AC(t) {\n        let e = lt.get(t.strings);\n        return e === void 0 && lt.set(t.strings, e = new P(t)), e;\n    }\n    T(t) {\n        pt(this._$AH) || (this._$AH = [], this._$AR());\n        const e = this._$AH;\n        let s, n = 0;\n        for (const r of t)n === e.length ? e.push(s = new T(this.k(N()), this.k(N()), this, this.options)) : s = e[n], s._$AI(r), n++;\n        n < e.length && (this._$AR(s && s._$AB.nextSibling, n), e.length = n);\n    }\n    _$AR(t = this._$AA.nextSibling, e) {\n        var s;\n        for((s = this._$AP) === null || s === void 0 || s.call(this, !1, !0, e); t && t !== this._$AB;){\n            const n = t.nextSibling;\n            t.remove(), t = n;\n        }\n    }\n    setConnected(t) {\n        var e;\n        this._$AM === void 0 && (this._$Cp = t, (e = this._$AP) === null || e === void 0 || e.call(this, t));\n    }\n}\nclass k {\n    constructor(t, e, s, n, r){\n        this.type = 1, this._$AH = u, this._$AN = void 0, this.element = t, this.name = e, this._$AM = n, this.options = r, s.length > 2 || s[0] !== \"\" || s[1] !== \"\" ? (this._$AH = Array(s.length - 1).fill(new String), this.strings = s) : this._$AH = u;\n    }\n    get tagName() {\n        return this.element.tagName;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AI(t, e = this, s, n) {\n        const r = this.strings;\n        let o = !1;\n        if (r === void 0) t = b(this, t, e, 0), o = !O(t) || t !== this._$AH && t !== E, o && (this._$AH = t);\n        else {\n            const c = t;\n            let l, h;\n            for(t = r[0], l = 0; l < r.length - 1; l++)h = b(this, c[s + l], e, l), h === E && (h = this._$AH[l]), o || (o = !O(h) || h !== this._$AH[l]), h === u ? t = u : t !== u && (t += (h ?? \"\") + r[l + 1]), this._$AH[l] = h;\n        }\n        o && !n && this.j(t);\n    }\n    j(t) {\n        t === u ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? \"\");\n    }\n}\nclass wt extends k {\n    constructor(){\n        super(...arguments), this.type = 3;\n    }\n    j(t) {\n        this.element[this.name] = t === u ? void 0 : t;\n    }\n}\nconst Ut = S ? S.emptyScript : \"\";\nclass Nt extends k {\n    constructor(){\n        super(...arguments), this.type = 4;\n    }\n    j(t) {\n        t && t !== u ? this.element.setAttribute(this.name, Ut) : this.element.removeAttribute(this.name);\n    }\n}\nclass Ot extends k {\n    constructor(t, e, s, n, r){\n        super(t, e, s, n, r), this.type = 5;\n    }\n    _$AI(t, e = this) {\n        var s;\n        if ((t = (s = b(this, t, e, 0)) !== null && s !== void 0 ? s : u) === E) return;\n        const n = this._$AH, r = t === u && n !== u || t.capture !== n.capture || t.once !== n.once || t.passive !== n.passive, o = t !== u && (n === u || r);\n        r && this.element.removeEventListener(this.name, this, n), o && this.element.addEventListener(this.name, this, t), this._$AH = t;\n    }\n    handleEvent(t) {\n        var e, s;\n        typeof this._$AH == \"function\" ? this._$AH.call((s = (e = this.options) === null || e === void 0 ? void 0 : e.host) !== null && s !== void 0 ? s : this.element, t) : this._$AH.handleEvent(t);\n    }\n}\nclass Pt {\n    constructor(t, e, s){\n        this.element = t, this.type = 6, this._$AN = void 0, this._$AM = e, this.options = s;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AI(t) {\n        b(this, t);\n    }\n}\nconst ht = x.litHtmlPolyfillSupport;\nht == null || ht(P, T), ((D = x.litHtmlVersions) !== null && D !== void 0 ? D : x.litHtmlVersions = []).push(\"2.7.4\");\nconst Tt = (i, t, e)=>{\n    var s, n;\n    const r = (s = e == null ? void 0 : e.renderBefore) !== null && s !== void 0 ? s : t;\n    let o = r._$litPart$;\n    if (o === void 0) {\n        const c = (n = e == null ? void 0 : e.renderBefore) !== null && n !== void 0 ? n : null;\n        r._$litPart$ = o = new T(t.insertBefore(N(), c), c, void 0, e ?? {});\n    }\n    return o._$AI(i), o;\n}; /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nvar j, B;\nlet w = class extends y {\n    constructor(){\n        super(...arguments), this.renderOptions = {\n            host: this\n        }, this._$Do = void 0;\n    }\n    createRenderRoot() {\n        var t, e;\n        const s = super.createRenderRoot();\n        return (t = (e = this.renderOptions).renderBefore) !== null && t !== void 0 || (e.renderBefore = s.firstChild), s;\n    }\n    update(t) {\n        const e = this.render();\n        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = Tt(e, this.renderRoot, this.renderOptions);\n    }\n    connectedCallback() {\n        var t;\n        super.connectedCallback(), (t = this._$Do) === null || t === void 0 || t.setConnected(!0);\n    }\n    disconnectedCallback() {\n        var t;\n        super.disconnectedCallback(), (t = this._$Do) === null || t === void 0 || t.setConnected(!1);\n    }\n    render() {\n        return E;\n    }\n};\nw.finalized = !0, w._$litElement$ = !0, (j = globalThis.litElementHydrateSupport) === null || j === void 0 || j.call(globalThis, {\n    LitElement: w\n});\nconst at = globalThis.litElementPolyfillSupport;\nat == null || at({\n    LitElement: w\n});\n((B = globalThis.litElementVersions) !== null && B !== void 0 ? B : globalThis.litElementVersions = []).push(\"3.3.2\"); /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst Rt = (i)=>(t)=>typeof t == \"function\" ? ((e, s)=>(customElements.define(e, s), s))(i, t) : ((e, s)=>{\n            const { kind: n, elements: r } = s;\n            return {\n                kind: n,\n                elements: r,\n                finisher (o) {\n                    customElements.define(e, o);\n                }\n            };\n        })(i, t); /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst It = (i, t)=>t.kind === \"method\" && t.descriptor && !(\"value\" in t.descriptor) ? {\n        ...t,\n        finisher (e) {\n            e.createProperty(t.key, i);\n        }\n    } : {\n        kind: \"field\",\n        key: Symbol(),\n        placement: \"own\",\n        descriptor: {},\n        originalKey: t.key,\n        initializer () {\n            typeof t.initializer == \"function\" && (this[t.key] = t.initializer.call(this));\n        },\n        finisher (e) {\n            e.createProperty(t.key, i);\n        }\n    }, Mt = (i, t, e)=>{\n    t.constructor.createProperty(e, i);\n};\nfunction $(i) {\n    return (t, e)=>e !== void 0 ? Mt(i, t, e) : It(i, t);\n} /**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nvar V;\n((V = window.HTMLSlotElement) === null || V === void 0 ? void 0 : V.prototype.assignedElements) != null; /**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst Ht = (i)=>i.strings === void 0; /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst xt = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6\n}, Gt = (i)=>(...t)=>({\n            _$litDirective$: i,\n            values: t\n        });\nlet kt = class {\n    constructor(t){}\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AT(t, e, s) {\n        this._$Ct = t, this._$AM = e, this._$Ci = s;\n    }\n    _$AS(t, e) {\n        return this.update(t, e);\n    }\n    update(t, e) {\n        return this.render(...e);\n    }\n}; /**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst U = (i, t)=>{\n    var e, s;\n    const n = i._$AN;\n    if (n === void 0) return !1;\n    for (const r of n)(s = (e = r)._$AO) === null || s === void 0 || s.call(e, t, !1), U(r, t);\n    return !0;\n}, G = (i)=>{\n    let t, e;\n    do {\n        if ((t = i._$AM) === void 0) break;\n        e = t._$AN, e.delete(i), i = t;\n    }while ((e == null ? void 0 : e.size) === 0);\n}, gt = (i)=>{\n    for(let t; t = i._$AM; i = t){\n        let e = t._$AN;\n        if (e === void 0) t._$AN = e = new Set;\n        else if (e.has(i)) break;\n        e.add(i), Dt(t);\n    }\n};\nfunction Lt(i) {\n    this._$AN !== void 0 ? (G(this), this._$AM = i, gt(this)) : this._$AM = i;\n}\nfunction Wt(i, t = !1, e = 0) {\n    const s = this._$AH, n = this._$AN;\n    if (n !== void 0 && n.size !== 0) if (t) if (Array.isArray(s)) for(let r = e; r < s.length; r++)U(s[r], !1), G(s[r]);\n    else s != null && (U(s, !1), G(s));\n    else U(this, i);\n}\nconst Dt = (i)=>{\n    var t, e, s, n;\n    i.type == xt.CHILD && ((t = (s = i)._$AP) !== null && t !== void 0 || (s._$AP = Wt), (e = (n = i)._$AQ) !== null && e !== void 0 || (n._$AQ = Lt));\n};\nclass zt extends kt {\n    constructor(){\n        super(...arguments), this._$AN = void 0;\n    }\n    _$AT(t, e, s) {\n        super._$AT(t, e, s), gt(this), this.isConnected = t._$AU;\n    }\n    _$AO(t, e = !0) {\n        var s, n;\n        t !== this.isConnected && (this.isConnected = t, t ? (s = this.reconnected) === null || s === void 0 || s.call(this) : (n = this.disconnected) === null || n === void 0 || n.call(this)), e && (U(this, t), G(this));\n    }\n    setValue(t) {\n        if (Ht(this._$Ct)) this._$Ct._$AI(t, this);\n        else {\n            const e = [\n                ...this._$Ct._$AH\n            ];\n            e[this._$Ci] = t, this._$Ct._$AI(e, this, 0);\n        }\n    }\n    disconnected() {}\n    reconnected() {}\n} /**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ \nconst jt = ()=>new Bt;\nclass Bt {\n}\nconst K = new WeakMap, Vt = Gt(class extends zt {\n    render(i) {\n        return u;\n    }\n    update(i, [t]) {\n        var e;\n        const s = t !== this.G;\n        return s && this.G !== void 0 && this.ot(void 0), (s || this.rt !== this.lt) && (this.G = t, this.ct = (e = i.options) === null || e === void 0 ? void 0 : e.host, this.ot(this.lt = i.element)), u;\n    }\n    ot(i) {\n        var t;\n        if (typeof this.G == \"function\") {\n            const e = (t = this.ct) !== null && t !== void 0 ? t : globalThis;\n            let s = K.get(e);\n            s === void 0 && (s = new WeakMap, K.set(e, s)), s.get(this.G) !== void 0 && this.G.call(this.ct, void 0), s.set(this.G, i), i !== void 0 && this.G.call(this.ct, i);\n        } else this.G.value = i;\n    }\n    get rt() {\n        var i, t, e;\n        return typeof this.G == \"function\" ? (t = K.get((i = this.ct) !== null && i !== void 0 ? i : globalThis)) === null || t === void 0 ? void 0 : t.get(this.G) : (e = this.G) === null || e === void 0 ? void 0 : e.value;\n    }\n    disconnected() {\n        this.rt === this.lt && this.ot(void 0);\n    }\n    reconnected() {\n        this.ot(this.lt);\n    }\n});\nvar Kt = Object.defineProperty, Yt = Object.getOwnPropertyDescriptor, p = (i, t, e, s)=>{\n    for(var n = s > 1 ? void 0 : s ? Yt(t, e) : t, r = i.length - 1, o; r >= 0; r--)(o = i[r]) && (n = (s ? o(t, e, n) : o(n)) || n);\n    return s && n && Kt(t, e, n), n;\n};\nfunction qt(i) {\n    return customElements.get(i) ? (t)=>t : Rt(i);\n}\nexports.GiscusWidget = class extends w {\n    constructor(){\n        super(), this.GISCUS_SESSION_KEY = \"giscus-session\", this.GISCUS_DEFAULT_HOST = \"https://giscus.app\", this.ERROR_SUGGESTION = \"Please consider reporting this error at https://github.com/giscus/giscus/issues/new.\", this.__session = \"\", this._iframeRef = jt(), this.messageEventHandler = this.handleMessageEvent.bind(this), this.hasLoaded = !1, this.host = this.GISCUS_DEFAULT_HOST, this.strict = \"0\", this.reactionsEnabled = \"1\", this.emitMetadata = \"0\", this.inputPosition = \"bottom\", this.theme = \"light\", this.lang = \"en\", this.loading = \"eager\", this.setupSession(), window.addEventListener(\"message\", this.messageEventHandler);\n    }\n    get iframeRef() {\n        var t;\n        return (t = this._iframeRef) == null ? void 0 : t.value;\n    }\n    get _host() {\n        try {\n            return new URL(this.host), this.host;\n        } catch  {\n            return this.GISCUS_DEFAULT_HOST;\n        }\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback(), window.removeEventListener(\"message\", this.messageEventHandler);\n    }\n    _formatError(t) {\n        return `[giscus] An error occurred. Error message: \"${t}\".`;\n    }\n    setupSession() {\n        const t = location.href, e = new URL(t), s = localStorage.getItem(this.GISCUS_SESSION_KEY), n = e.searchParams.get(\"giscus\") || \"\";\n        if (this.__session = \"\", n) {\n            localStorage.setItem(this.GISCUS_SESSION_KEY, JSON.stringify(n)), this.__session = n, e.searchParams.delete(\"giscus\"), e.hash = \"\", history.replaceState(void 0, document.title, e.toString());\n            return;\n        }\n        if (s) try {\n            this.__session = JSON.parse(s);\n        } catch (r) {\n            localStorage.removeItem(this.GISCUS_SESSION_KEY), console.warn(`${this._formatError(r == null ? void 0 : r.message)} Session has been cleared.`);\n        }\n    }\n    signOut() {\n        localStorage.removeItem(this.GISCUS_SESSION_KEY), this.__session = \"\", this.update(new Map);\n    }\n    handleMessageEvent(t) {\n        if (t.origin !== this._host) return;\n        const { data: e } = t;\n        if (!(typeof e == \"object\" && e.giscus)) return;\n        if (this.iframeRef && e.giscus.resizeHeight && (this.iframeRef.style.height = `${e.giscus.resizeHeight}px`), e.giscus.signOut) {\n            console.log(\"[giscus] User has logged out. Session has been cleared.\"), this.signOut();\n            return;\n        }\n        if (!e.giscus.error) return;\n        const s = e.giscus.error;\n        if (s.includes(\"Bad credentials\") || s.includes(\"Invalid state value\") || s.includes(\"State has expired\")) {\n            if (localStorage.getItem(this.GISCUS_SESSION_KEY) !== null) {\n                console.warn(`${this._formatError(s)} Session has been cleared.`), this.signOut();\n                return;\n            }\n            console.error(`${this._formatError(s)} No session is stored initially. ${this.ERROR_SUGGESTION}`);\n        }\n        if (s.includes(\"Discussion not found\")) {\n            console.warn(`[giscus] ${s}. A new discussion will be created if a comment/reaction is submitted.`);\n            return;\n        }\n        console.error(`${this._formatError(s)} ${this.ERROR_SUGGESTION}`);\n    }\n    sendMessage(t) {\n        !this.iframeRef || !this.iframeRef.contentWindow || !this.hasLoaded || (console.log({\n            host: this.host,\n            _host: this._host\n        }), this.iframeRef.contentWindow.postMessage({\n            giscus: t\n        }, this._host));\n    }\n    updateConfig() {\n        const t = {\n            setConfig: {\n                repo: this.repo,\n                repoId: this.repoId,\n                category: this.category,\n                categoryId: this.categoryId,\n                term: this.getTerm(),\n                number: +this.getNumber(),\n                strict: this.strict === \"1\",\n                reactionsEnabled: this.reactionsEnabled === \"1\",\n                emitMetadata: this.emitMetadata === \"1\",\n                inputPosition: this.inputPosition,\n                theme: this.theme,\n                lang: this.lang\n            }\n        };\n        this.sendMessage(t);\n    }\n    firstUpdated() {\n        var t;\n        (t = this.iframeRef) == null || t.addEventListener(\"load\", ()=>{\n            var e;\n            (e = this.iframeRef) == null || e.classList.remove(\"loading\"), this.hasLoaded = !0, this.updateConfig();\n        });\n    }\n    requestUpdate(t, e, s) {\n        if (!this.hasUpdated || t === \"host\") {\n            super.requestUpdate(t, e, s);\n            return;\n        }\n        this.updateConfig();\n    }\n    getMetaContent(t, e = !1) {\n        const s = e ? `meta[property='og:${t}'],` : \"\", n = document.querySelector(s + `meta[name='${t}']`);\n        return n ? n.content : \"\";\n    }\n    _getCleanedUrl() {\n        const t = new URL(location.href);\n        return t.searchParams.delete(\"giscus\"), t.hash = \"\", t;\n    }\n    getTerm() {\n        switch(this.mapping){\n            case \"url\":\n                return `${this._getCleanedUrl()}`;\n            case \"title\":\n                return document.title;\n            case \"og:title\":\n                return this.getMetaContent(\"title\", !0);\n            case \"specific\":\n                return this.term || \"\";\n            case \"number\":\n                return \"\";\n            case \"pathname\":\n            default:\n                return location.pathname.length < 2 ? \"index\" : location.pathname.substring(1).replace(/\\.\\w+$/, \"\");\n        }\n    }\n    getNumber() {\n        return this.mapping === \"number\" && this.term || \"\";\n    }\n    getIframeSrc() {\n        const t = this._getCleanedUrl().toString(), e = `${t}${this.id ? \"#\" + this.id : \"\"}`, s = this.getMetaContent(\"description\", !0), n = this.getMetaContent(\"giscus:backlink\") || t, r = {\n            origin: e,\n            session: this.__session,\n            repo: this.repo,\n            repoId: this.repoId || \"\",\n            category: this.category || \"\",\n            categoryId: this.categoryId || \"\",\n            term: this.getTerm(),\n            number: this.getNumber(),\n            strict: this.strict,\n            reactionsEnabled: this.reactionsEnabled,\n            emitMetadata: this.emitMetadata,\n            inputPosition: this.inputPosition,\n            theme: this.theme,\n            description: s,\n            backLink: n\n        }, o = this._host, c = this.lang ? `/${this.lang}` : \"\", l = new URLSearchParams(r);\n        return `${o}${c}/widget?${l}`;\n    }\n    render() {\n        return Et`\n      <iframe\n        title=\"Comments\"\n        scrolling=\"no\"\n        class=\"loading\"\n        ${Vt(this._iframeRef)}\n        src=${this.getIframeSrc()}\n        loading=${this.loading}\n        allow=\"clipboard-write\"\n        part=\"iframe\"\n      ></iframe>\n    `;\n    }\n};\nexports.GiscusWidget.styles = vt`\n    :host,\n    iframe {\n      width: 100%;\n      border: none;\n      min-height: 150px;\n      color-scheme: light dark;\n    }\n\n    iframe.loading {\n      opacity: 0;\n    }\n  `;\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"host\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"repo\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"repoId\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"category\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"categoryId\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"mapping\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"term\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"strict\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"reactionsEnabled\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"emitMetadata\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"inputPosition\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"theme\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"lang\", 2);\np([\n    $({\n        reflect: !0\n    })\n], exports.GiscusWidget.prototype, \"loading\", 2);\nexports.GiscusWidget = p([\n    qt(\"giscus-widget\")\n], exports.GiscusWidget);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@giscus/react/dist/giscus-1126a0a1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@giscus/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@giscus/react/dist/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst j = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\"), t = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction b({ id: r, host: s, repo: i, repoId: u, category: n, categoryId: o, mapping: c, term: a, strict: d, reactionsEnabled: f, emitMetadata: l, inputPosition: m, theme: p, lang: g, loading: q }) {\n    const [e, x] = t.useState(!1);\n    return t.useEffect(()=>{\n        e || (Promise.resolve().then(()=>__webpack_require__(/*! ./giscus-1126a0a1.js */ \"(ssr)/./node_modules/@giscus/react/dist/giscus-1126a0a1.js\")), x(!0));\n    }, []), e ? j.jsx(\"giscus-widget\", {\n        id: r,\n        host: s,\n        repo: i,\n        repoid: u,\n        category: n,\n        categoryid: o,\n        mapping: c,\n        term: a,\n        strict: d,\n        reactionsenabled: f,\n        emitmetadata: l,\n        inputposition: m,\n        theme: p,\n        lang: g,\n        loading: q\n    }) : null;\n}\nmodule.exports = b;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdpc2N1cy9yZWFjdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQUEsTUFBTUEsSUFBRUMsbUJBQU9BLENBQUMsZ0lBQW1CLEdBQUVDLElBQUVELG1CQUFPQSxDQUFDLHdHQUFPO0FBQUUsU0FBU0UsRUFBRSxFQUFDQyxJQUFHQyxDQUFDLEVBQUNDLE1BQUtDLENBQUMsRUFBQ0MsTUFBS0MsQ0FBQyxFQUFDQyxRQUFPQyxDQUFDLEVBQUNDLFVBQVNDLENBQUMsRUFBQ0MsWUFBV0MsQ0FBQyxFQUFDQyxTQUFRQyxDQUFDLEVBQUNDLE1BQUtDLENBQUMsRUFBQ0MsUUFBT0MsQ0FBQyxFQUFDQyxrQkFBaUJDLENBQUMsRUFBQ0MsY0FBYUMsQ0FBQyxFQUFDQyxlQUFjQyxDQUFDLEVBQUNDLE9BQU1DLENBQUMsRUFBQ0MsTUFBS0MsQ0FBQyxFQUFDQyxTQUFRQyxDQUFDLEVBQUM7SUFBRSxNQUFLLENBQUNDLEdBQUVDLEVBQUUsR0FBQ2pDLEVBQUVrQyxRQUFRLENBQUMsQ0FBQztJQUFHLE9BQU9sQyxFQUFFbUMsU0FBUyxDQUFDO1FBQUtILEtBQUlJLENBQUFBLFFBQVFDLE9BQU8sR0FBR0MsSUFBSSxDQUFDLElBQUl2QyxtQkFBT0EsQ0FBQyx3RkFBc0IsSUFBR2tDLEVBQUUsQ0FBQyxFQUFDO0lBQUUsR0FBRSxFQUFFLEdBQUVELElBQUVsQyxFQUFFeUMsR0FBRyxDQUFDLGlCQUFnQjtRQUFDckMsSUFBR0M7UUFBRUMsTUFBS0M7UUFBRUMsTUFBS0M7UUFBRWlDLFFBQU8vQjtRQUFFQyxVQUFTQztRQUFFOEIsWUFBVzVCO1FBQUVDLFNBQVFDO1FBQUVDLE1BQUtDO1FBQUVDLFFBQU9DO1FBQUV1QixrQkFBaUJyQjtRQUFFc0IsY0FBYXBCO1FBQUVxQixlQUFjbkI7UUFBRUMsT0FBTUM7UUFBRUMsTUFBS0M7UUFBRUMsU0FBUUM7SUFBQyxLQUFHO0FBQUk7QUFBQ2MsT0FBT0MsT0FBTyxHQUFDN0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWlsd2luZC1uZXh0anMtc3RhcnRlci1ibG9nLy4vbm9kZV9tb2R1bGVzL0BnaXNjdXMvcmVhY3QvZGlzdC9pbmRleC5qcz85ZWY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO2NvbnN0IGo9cmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpLHQ9cmVxdWlyZShcInJlYWN0XCIpO2Z1bmN0aW9uIGIoe2lkOnIsaG9zdDpzLHJlcG86aSxyZXBvSWQ6dSxjYXRlZ29yeTpuLGNhdGVnb3J5SWQ6byxtYXBwaW5nOmMsdGVybTphLHN0cmljdDpkLHJlYWN0aW9uc0VuYWJsZWQ6ZixlbWl0TWV0YWRhdGE6bCxpbnB1dFBvc2l0aW9uOm0sdGhlbWU6cCxsYW5nOmcsbG9hZGluZzpxfSl7Y29uc3RbZSx4XT10LnVzZVN0YXRlKCExKTtyZXR1cm4gdC51c2VFZmZlY3QoKCk9PntlfHwoUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+cmVxdWlyZShcIi4vZ2lzY3VzLTExMjZhMGExLmpzXCIpKSx4KCEwKSl9LFtdKSxlP2ouanN4KFwiZ2lzY3VzLXdpZGdldFwiLHtpZDpyLGhvc3Q6cyxyZXBvOmkscmVwb2lkOnUsY2F0ZWdvcnk6bixjYXRlZ29yeWlkOm8sbWFwcGluZzpjLHRlcm06YSxzdHJpY3Q6ZCxyZWFjdGlvbnNlbmFibGVkOmYsZW1pdG1ldGFkYXRhOmwsaW5wdXRwb3NpdGlvbjptLHRoZW1lOnAsbGFuZzpnLGxvYWRpbmc6cX0pOm51bGx9bW9kdWxlLmV4cG9ydHM9YjtcbiJdLCJuYW1lcyI6WyJqIiwicmVxdWlyZSIsInQiLCJiIiwiaWQiLCJyIiwiaG9zdCIsInMiLCJyZXBvIiwiaSIsInJlcG9JZCIsInUiLCJjYXRlZ29yeSIsIm4iLCJjYXRlZ29yeUlkIiwibyIsIm1hcHBpbmciLCJjIiwidGVybSIsImEiLCJzdHJpY3QiLCJkIiwicmVhY3Rpb25zRW5hYmxlZCIsImYiLCJlbWl0TWV0YWRhdGEiLCJsIiwiaW5wdXRQb3NpdGlvbiIsIm0iLCJ0aGVtZSIsInAiLCJsYW5nIiwiZyIsImxvYWRpbmciLCJxIiwiZSIsIngiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImpzeCIsInJlcG9pZCIsImNhdGVnb3J5aWQiLCJyZWFjdGlvbnNlbmFibGVkIiwiZW1pdG1ldGFkYXRhIiwiaW5wdXRwb3NpdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@giscus/react/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@giscus/react/dist/wrapper.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@giscus/react/dist/wrapper.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(ssr)/./node_modules/@giscus/react/dist/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_index_js__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((_index_js__WEBPACK_IMPORTED_MODULE_0___default()));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGdpc2N1cy9yZWFjdC9kaXN0L3dyYXBwZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUVoQyxpRUFBZUEsa0RBQU1BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWlsd2luZC1uZXh0anMtc3RhcnRlci1ibG9nLy4vbm9kZV9tb2R1bGVzL0BnaXNjdXMvcmVhY3QvZGlzdC93cmFwcGVyLm1qcz8wN2ZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2R1bGUgZnJvbSAnLi9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IG1vZHVsZTsiXSwibmFtZXMiOlsibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@giscus/react/dist/wrapper.mjs\n");

/***/ })

};
;