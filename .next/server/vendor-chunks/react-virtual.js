"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-virtual";
exports.ids = ["vendor-chunks/react-virtual"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-virtual/dist/react-virtual.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/react-virtual/dist/react-virtual.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultRangeExtractor: () => (/* binding */ defaultRangeExtractor),\n/* harmony export */   useVirtual: () => (/* binding */ useVirtual)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nvar props = [\n    \"bottom\",\n    \"height\",\n    \"left\",\n    \"right\",\n    \"top\",\n    \"width\"\n];\nvar rectChanged = function rectChanged(a, b) {\n    if (a === void 0) {\n        a = {};\n    }\n    if (b === void 0) {\n        b = {};\n    }\n    return props.some(function(prop) {\n        return a[prop] !== b[prop];\n    });\n};\nvar observedNodes = /*#__PURE__*/ new Map();\nvar rafId;\nvar run = function run() {\n    var changedStates = [];\n    observedNodes.forEach(function(state, node) {\n        var newRect = node.getBoundingClientRect();\n        if (rectChanged(newRect, state.rect)) {\n            state.rect = newRect;\n            changedStates.push(state);\n        }\n    });\n    changedStates.forEach(function(state) {\n        state.callbacks.forEach(function(cb) {\n            return cb(state.rect);\n        });\n    });\n    rafId = window.requestAnimationFrame(run);\n};\nfunction observeRect(node, cb) {\n    return {\n        observe: function observe() {\n            var wasEmpty = observedNodes.size === 0;\n            if (observedNodes.has(node)) {\n                observedNodes.get(node).callbacks.push(cb);\n            } else {\n                observedNodes.set(node, {\n                    rect: undefined,\n                    hasRectChanged: false,\n                    callbacks: [\n                        cb\n                    ]\n                });\n            }\n            if (wasEmpty) run();\n        },\n        unobserve: function unobserve() {\n            var state = observedNodes.get(node);\n            if (state) {\n                // Remove the callback\n                var index = state.callbacks.indexOf(cb);\n                if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference\n                if (!state.callbacks.length) observedNodes[\"delete\"](node); // Stop the loop\n                if (!observedNodes.size) cancelAnimationFrame(rafId);\n            }\n        }\n    };\n}\nvar useIsomorphicLayoutEffect =  false ? 0 : (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect);\nfunction useRect(nodeRef, initialRect) {\n    if (initialRect === void 0) {\n        initialRect = {\n            width: 0,\n            height: 0\n        };\n    }\n    var _React$useState = react__WEBPACK_IMPORTED_MODULE_0___default().useState(nodeRef.current), element = _React$useState[0], setElement = _React$useState[1];\n    var _React$useReducer = react__WEBPACK_IMPORTED_MODULE_0___default().useReducer(rectReducer, initialRect), rect = _React$useReducer[0], dispatch = _React$useReducer[1];\n    var initialRectSet = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(false);\n    useIsomorphicLayoutEffect(function() {\n        if (nodeRef.current !== element) {\n            setElement(nodeRef.current);\n        }\n    });\n    useIsomorphicLayoutEffect(function() {\n        if (element && !initialRectSet.current) {\n            initialRectSet.current = true;\n            var _rect = element.getBoundingClientRect();\n            dispatch({\n                rect: _rect\n            });\n        }\n    }, [\n        element\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(function() {\n        if (!element) {\n            return;\n        }\n        var observer = observeRect(element, function(rect) {\n            dispatch({\n                rect: rect\n            });\n        });\n        observer.observe();\n        return function() {\n            observer.unobserve();\n        };\n    }, [\n        element\n    ]);\n    return rect;\n}\nfunction rectReducer(state, action) {\n    var rect = action.rect;\n    if (state.height !== rect.height || state.width !== rect.width) {\n        return rect;\n    }\n    return state;\n}\nvar defaultEstimateSize = function defaultEstimateSize() {\n    return 50;\n};\nvar defaultKeyExtractor = function defaultKeyExtractor(index) {\n    return index;\n};\nvar defaultMeasureSize = function defaultMeasureSize(el, horizontal) {\n    var key = horizontal ? \"offsetWidth\" : \"offsetHeight\";\n    return el[key];\n};\nvar defaultRangeExtractor = function defaultRangeExtractor(range) {\n    var start = Math.max(range.start - range.overscan, 0);\n    var end = Math.min(range.end + range.overscan, range.size - 1);\n    var arr = [];\n    for(var i = start; i <= end; i++){\n        arr.push(i);\n    }\n    return arr;\n};\nfunction useVirtual(_ref) {\n    var _measurements;\n    var _ref$size = _ref.size, size = _ref$size === void 0 ? 0 : _ref$size, _ref$estimateSize = _ref.estimateSize, estimateSize = _ref$estimateSize === void 0 ? defaultEstimateSize : _ref$estimateSize, _ref$overscan = _ref.overscan, overscan = _ref$overscan === void 0 ? 1 : _ref$overscan, _ref$paddingStart = _ref.paddingStart, paddingStart = _ref$paddingStart === void 0 ? 0 : _ref$paddingStart, _ref$paddingEnd = _ref.paddingEnd, paddingEnd = _ref$paddingEnd === void 0 ? 0 : _ref$paddingEnd, parentRef = _ref.parentRef, horizontal = _ref.horizontal, scrollToFn = _ref.scrollToFn, useObserver = _ref.useObserver, initialRect = _ref.initialRect, onScrollElement = _ref.onScrollElement, scrollOffsetFn = _ref.scrollOffsetFn, _ref$keyExtractor = _ref.keyExtractor, keyExtractor = _ref$keyExtractor === void 0 ? defaultKeyExtractor : _ref$keyExtractor, _ref$measureSize = _ref.measureSize, measureSize = _ref$measureSize === void 0 ? defaultMeasureSize : _ref$measureSize, _ref$rangeExtractor = _ref.rangeExtractor, rangeExtractor = _ref$rangeExtractor === void 0 ? defaultRangeExtractor : _ref$rangeExtractor;\n    var sizeKey = horizontal ? \"width\" : \"height\";\n    var scrollKey = horizontal ? \"scrollLeft\" : \"scrollTop\";\n    var latestRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef({\n        scrollOffset: 0,\n        measurements: []\n    });\n    var _React$useState = react__WEBPACK_IMPORTED_MODULE_0___default().useState(0), scrollOffset = _React$useState[0], setScrollOffset = _React$useState[1];\n    latestRef.current.scrollOffset = scrollOffset;\n    var useMeasureParent = useObserver || useRect;\n    var _useMeasureParent = useMeasureParent(parentRef, initialRect), outerSize = _useMeasureParent[sizeKey];\n    latestRef.current.outerSize = outerSize;\n    var defaultScrollToFn = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(offset) {\n        if (parentRef.current) {\n            parentRef.current[scrollKey] = offset;\n        }\n    }, [\n        parentRef,\n        scrollKey\n    ]);\n    var resolvedScrollToFn = scrollToFn || defaultScrollToFn;\n    scrollToFn = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(offset) {\n        resolvedScrollToFn(offset, defaultScrollToFn);\n    }, [\n        defaultScrollToFn,\n        resolvedScrollToFn\n    ]);\n    var _React$useState2 = react__WEBPACK_IMPORTED_MODULE_0___default().useState({}), measuredCache = _React$useState2[0], setMeasuredCache = _React$useState2[1];\n    var measure = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function() {\n        return setMeasuredCache({});\n    }, []);\n    var pendingMeasuredCacheIndexesRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef([]);\n    var measurements = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(function() {\n        var min = pendingMeasuredCacheIndexesRef.current.length > 0 ? Math.min.apply(Math, pendingMeasuredCacheIndexesRef.current) : 0;\n        pendingMeasuredCacheIndexesRef.current = [];\n        var measurements = latestRef.current.measurements.slice(0, min);\n        for(var i = min; i < size; i++){\n            var key = keyExtractor(i);\n            var measuredSize = measuredCache[key];\n            var _start = measurements[i - 1] ? measurements[i - 1].end : paddingStart;\n            var _size = typeof measuredSize === \"number\" ? measuredSize : estimateSize(i);\n            var _end = _start + _size;\n            measurements[i] = {\n                index: i,\n                start: _start,\n                size: _size,\n                end: _end,\n                key: key\n            };\n        }\n        return measurements;\n    }, [\n        estimateSize,\n        measuredCache,\n        paddingStart,\n        size,\n        keyExtractor\n    ]);\n    var totalSize = (((_measurements = measurements[size - 1]) == null ? void 0 : _measurements.end) || paddingStart) + paddingEnd;\n    latestRef.current.measurements = measurements;\n    latestRef.current.totalSize = totalSize;\n    var element = onScrollElement ? onScrollElement.current : parentRef.current;\n    var scrollOffsetFnRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(scrollOffsetFn);\n    scrollOffsetFnRef.current = scrollOffsetFn;\n    useIsomorphicLayoutEffect(function() {\n        if (!element) {\n            setScrollOffset(0);\n            return;\n        }\n        var onScroll = function onScroll(event) {\n            var offset = scrollOffsetFnRef.current ? scrollOffsetFnRef.current(event) : element[scrollKey];\n            setScrollOffset(offset);\n        };\n        onScroll();\n        element.addEventListener(\"scroll\", onScroll, {\n            capture: false,\n            passive: true\n        });\n        return function() {\n            element.removeEventListener(\"scroll\", onScroll);\n        };\n    }, [\n        element,\n        scrollKey\n    ]);\n    var _calculateRange = calculateRange(latestRef.current), start = _calculateRange.start, end = _calculateRange.end;\n    var indexes = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(function() {\n        return rangeExtractor({\n            start: start,\n            end: end,\n            overscan: overscan,\n            size: measurements.length\n        });\n    }, [\n        start,\n        end,\n        overscan,\n        measurements.length,\n        rangeExtractor\n    ]);\n    var measureSizeRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(measureSize);\n    measureSizeRef.current = measureSize;\n    var virtualItems = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(function() {\n        var virtualItems = [];\n        var _loop = function _loop(k, len) {\n            var i = indexes[k];\n            var measurement = measurements[i];\n            var item = _extends(_extends({}, measurement), {}, {\n                measureRef: function measureRef(el) {\n                    if (el) {\n                        var measuredSize = measureSizeRef.current(el, horizontal);\n                        if (measuredSize !== item.size) {\n                            var _scrollOffset = latestRef.current.scrollOffset;\n                            if (item.start < _scrollOffset) {\n                                defaultScrollToFn(_scrollOffset + (measuredSize - item.size));\n                            }\n                            pendingMeasuredCacheIndexesRef.current.push(i);\n                            setMeasuredCache(function(old) {\n                                var _extends2;\n                                return _extends(_extends({}, old), {}, (_extends2 = {}, _extends2[item.key] = measuredSize, _extends2));\n                            });\n                        }\n                    }\n                }\n            });\n            virtualItems.push(item);\n        };\n        for(var k = 0, len = indexes.length; k < len; k++){\n            _loop(k);\n        }\n        return virtualItems;\n    }, [\n        indexes,\n        defaultScrollToFn,\n        horizontal,\n        measurements\n    ]);\n    var mountedRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(false);\n    useIsomorphicLayoutEffect(function() {\n        if (mountedRef.current) {\n            setMeasuredCache({});\n        }\n        mountedRef.current = true;\n    }, [\n        estimateSize\n    ]);\n    var scrollToOffset = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(toOffset, _temp) {\n        var _ref2 = _temp === void 0 ? {} : _temp, _ref2$align = _ref2.align, align = _ref2$align === void 0 ? \"start\" : _ref2$align;\n        var _latestRef$current = latestRef.current, scrollOffset = _latestRef$current.scrollOffset, outerSize = _latestRef$current.outerSize;\n        if (align === \"auto\") {\n            if (toOffset <= scrollOffset) {\n                align = \"start\";\n            } else if (toOffset >= scrollOffset + outerSize) {\n                align = \"end\";\n            } else {\n                align = \"start\";\n            }\n        }\n        if (align === \"start\") {\n            scrollToFn(toOffset);\n        } else if (align === \"end\") {\n            scrollToFn(toOffset - outerSize);\n        } else if (align === \"center\") {\n            scrollToFn(toOffset - outerSize / 2);\n        }\n    }, [\n        scrollToFn\n    ]);\n    var tryScrollToIndex = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function(index, _temp2) {\n        var _ref3 = _temp2 === void 0 ? {} : _temp2, _ref3$align = _ref3.align, align = _ref3$align === void 0 ? \"auto\" : _ref3$align, rest = _objectWithoutPropertiesLoose(_ref3, [\n            \"align\"\n        ]);\n        var _latestRef$current2 = latestRef.current, measurements = _latestRef$current2.measurements, scrollOffset = _latestRef$current2.scrollOffset, outerSize = _latestRef$current2.outerSize;\n        var measurement = measurements[Math.max(0, Math.min(index, size - 1))];\n        if (!measurement) {\n            return;\n        }\n        if (align === \"auto\") {\n            if (measurement.end >= scrollOffset + outerSize) {\n                align = \"end\";\n            } else if (measurement.start <= scrollOffset) {\n                align = \"start\";\n            } else {\n                return;\n            }\n        }\n        var toOffset = align === \"center\" ? measurement.start + measurement.size / 2 : align === \"end\" ? measurement.end : measurement.start;\n        scrollToOffset(toOffset, _extends({\n            align: align\n        }, rest));\n    }, [\n        scrollToOffset,\n        size\n    ]);\n    var scrollToIndex = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        // We do a double request here because of\n        // dynamic sizes which can cause offset shift\n        // and end up in the wrong spot. Unfortunately,\n        // we can't know about those dynamic sizes until\n        // we try and render them. So double down!\n        tryScrollToIndex.apply(void 0, args);\n        requestAnimationFrame(function() {\n            tryScrollToIndex.apply(void 0, args);\n        });\n    }, [\n        tryScrollToIndex\n    ]);\n    return {\n        virtualItems: virtualItems,\n        totalSize: totalSize,\n        scrollToOffset: scrollToOffset,\n        scrollToIndex: scrollToIndex,\n        measure: measure\n    };\n}\nvar findNearestBinarySearch = function findNearestBinarySearch(low, high, getCurrentValue, value) {\n    while(low <= high){\n        var middle = (low + high) / 2 | 0;\n        var currentValue = getCurrentValue(middle);\n        if (currentValue < value) {\n            low = middle + 1;\n        } else if (currentValue > value) {\n            high = middle - 1;\n        } else {\n            return middle;\n        }\n    }\n    if (low > 0) {\n        return low - 1;\n    } else {\n        return 0;\n    }\n};\nfunction calculateRange(_ref4) {\n    var measurements = _ref4.measurements, outerSize = _ref4.outerSize, scrollOffset = _ref4.scrollOffset;\n    var size = measurements.length - 1;\n    var getOffset = function getOffset(index) {\n        return measurements[index].start;\n    };\n    var start = findNearestBinarySearch(0, size, getOffset, scrollOffset);\n    var end = start;\n    while(end < size && measurements[end].end < scrollOffset + outerSize){\n        end++;\n    }\n    return {\n        start: start,\n        end: end\n    };\n}\n //# sourceMappingURL=react-virtual.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-virtual/dist/react-virtual.mjs\n");

/***/ })

};
;