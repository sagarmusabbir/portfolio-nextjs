"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algoliasearch";
exports.ids = ["vendor-chunks/algoliasearch"];
exports.modules = {

/***/ "(ssr)/./node_modules/algoliasearch/dist/algoliasearch-lite.esm.browser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/algoliasearch/dist/algoliasearch-lite.esm.browser.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction createBrowserLocalStorageCache(options) {\n    const namespaceKey = `algoliasearch-client-js-${options.key}`;\n    // eslint-disable-next-line functional/no-let\n    let storage;\n    const getStorage = ()=>{\n        if (storage === undefined) {\n            storage = options.localStorage || window.localStorage;\n        }\n        return storage;\n    };\n    const getNamespace = ()=>{\n        return JSON.parse(getStorage().getItem(namespaceKey) || \"{}\");\n    };\n    const setNamespace = (namespace)=>{\n        getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n    };\n    const removeOutdatedCacheItems = ()=>{\n        const timeToLive = options.timeToLive ? options.timeToLive * 1000 : null;\n        const namespace = getNamespace();\n        const filteredNamespaceWithoutOldFormattedCacheItems = Object.fromEntries(Object.entries(namespace).filter(([, cacheItem])=>{\n            return cacheItem.timestamp !== undefined;\n        }));\n        setNamespace(filteredNamespaceWithoutOldFormattedCacheItems);\n        if (!timeToLive) return;\n        const filteredNamespaceWithoutExpiredItems = Object.fromEntries(Object.entries(filteredNamespaceWithoutOldFormattedCacheItems).filter(([, cacheItem])=>{\n            const currentTimestamp = new Date().getTime();\n            const isExpired = cacheItem.timestamp + timeToLive < currentTimestamp;\n            return !isExpired;\n        }));\n        setNamespace(filteredNamespaceWithoutExpiredItems);\n    };\n    return {\n        get (key, defaultValue, events = {\n            miss: ()=>Promise.resolve()\n        }) {\n            return Promise.resolve().then(()=>{\n                removeOutdatedCacheItems();\n                const keyAsString = JSON.stringify(key);\n                return getNamespace()[keyAsString];\n            }).then((value)=>{\n                return Promise.all([\n                    value ? value.value : defaultValue(),\n                    value !== undefined\n                ]);\n            }).then(([value, exists])=>{\n                return Promise.all([\n                    value,\n                    exists || events.miss(value)\n                ]);\n            }).then(([value])=>value);\n        },\n        set (key, value) {\n            return Promise.resolve().then(()=>{\n                const namespace = getNamespace();\n                // eslint-disable-next-line functional/immutable-data\n                namespace[JSON.stringify(key)] = {\n                    timestamp: new Date().getTime(),\n                    value\n                };\n                getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n                return value;\n            });\n        },\n        delete (key) {\n            return Promise.resolve().then(()=>{\n                const namespace = getNamespace();\n                // eslint-disable-next-line functional/immutable-data\n                delete namespace[JSON.stringify(key)];\n                getStorage().setItem(namespaceKey, JSON.stringify(namespace));\n            });\n        },\n        clear () {\n            return Promise.resolve().then(()=>{\n                getStorage().removeItem(namespaceKey);\n            });\n        }\n    };\n}\n// @todo Add logger on options to debug when caches go wrong.\nfunction createFallbackableCache(options) {\n    const caches = [\n        ...options.caches\n    ];\n    const current = caches.shift(); // eslint-disable-line functional/immutable-data\n    if (current === undefined) {\n        return createNullCache();\n    }\n    return {\n        get (key, defaultValue, events = {\n            miss: ()=>Promise.resolve()\n        }) {\n            return current.get(key, defaultValue, events).catch(()=>{\n                return createFallbackableCache({\n                    caches\n                }).get(key, defaultValue, events);\n            });\n        },\n        set (key, value) {\n            return current.set(key, value).catch(()=>{\n                return createFallbackableCache({\n                    caches\n                }).set(key, value);\n            });\n        },\n        delete (key) {\n            return current.delete(key).catch(()=>{\n                return createFallbackableCache({\n                    caches\n                }).delete(key);\n            });\n        },\n        clear () {\n            return current.clear().catch(()=>{\n                return createFallbackableCache({\n                    caches\n                }).clear();\n            });\n        }\n    };\n}\nfunction createNullCache() {\n    return {\n        get (_key, defaultValue, events = {\n            miss: ()=>Promise.resolve()\n        }) {\n            const value = defaultValue();\n            return value.then((result)=>Promise.all([\n                    result,\n                    events.miss(result)\n                ])).then(([result])=>result);\n        },\n        set (_key, value) {\n            return Promise.resolve(value);\n        },\n        delete (_key) {\n            return Promise.resolve();\n        },\n        clear () {\n            return Promise.resolve();\n        }\n    };\n}\nfunction createInMemoryCache(options = {\n    serializable: true\n}) {\n    // eslint-disable-next-line functional/no-let\n    let cache = {};\n    return {\n        get (key, defaultValue, events = {\n            miss: ()=>Promise.resolve()\n        }) {\n            const keyAsString = JSON.stringify(key);\n            if (keyAsString in cache) {\n                return Promise.resolve(options.serializable ? JSON.parse(cache[keyAsString]) : cache[keyAsString]);\n            }\n            const promise = defaultValue();\n            const miss = events && events.miss || (()=>Promise.resolve());\n            return promise.then((value)=>miss(value)).then(()=>promise);\n        },\n        set (key, value) {\n            // eslint-disable-next-line functional/immutable-data\n            cache[JSON.stringify(key)] = options.serializable ? JSON.stringify(value) : value;\n            return Promise.resolve(value);\n        },\n        delete (key) {\n            // eslint-disable-next-line functional/immutable-data\n            delete cache[JSON.stringify(key)];\n            return Promise.resolve();\n        },\n        clear () {\n            cache = {};\n            return Promise.resolve();\n        }\n    };\n}\nfunction createAuth(authMode, appId, apiKey) {\n    const credentials = {\n        \"x-algolia-api-key\": apiKey,\n        \"x-algolia-application-id\": appId\n    };\n    return {\n        headers () {\n            return authMode === AuthMode.WithinHeaders ? credentials : {};\n        },\n        queryParameters () {\n            return authMode === AuthMode.WithinQueryParameters ? credentials : {};\n        }\n    };\n}\n// eslint-disable-next-line functional/prefer-readonly-type\nfunction shuffle(array) {\n    let c = array.length - 1; // eslint-disable-line functional/no-let\n    // eslint-disable-next-line functional/no-loop-statement\n    for(c; c > 0; c--){\n        const b = Math.floor(Math.random() * (c + 1));\n        const a = array[c];\n        array[c] = array[b]; // eslint-disable-line functional/immutable-data, no-param-reassign\n        array[b] = a; // eslint-disable-line functional/immutable-data, no-param-reassign\n    }\n    return array;\n}\nfunction addMethods(base, methods) {\n    if (!methods) {\n        return base;\n    }\n    Object.keys(methods).forEach((key)=>{\n        // eslint-disable-next-line functional/immutable-data, no-param-reassign\n        base[key] = methods[key](base);\n    });\n    return base;\n}\nfunction encode(format, ...args) {\n    // eslint-disable-next-line functional/no-let\n    let i = 0;\n    return format.replace(/%s/g, ()=>encodeURIComponent(args[i++]));\n}\nconst version = \"4.20.0\";\nconst AuthMode = {\n    /**\r\n     * If auth credentials should be in query parameters.\r\n     */ WithinQueryParameters: 0,\n    /**\r\n     * If auth credentials should be in headers.\r\n     */ WithinHeaders: 1\n};\nfunction createMappedRequestOptions(requestOptions, timeout) {\n    const options = requestOptions || {};\n    const data = options.data || {};\n    Object.keys(options).forEach((key)=>{\n        if ([\n            \"timeout\",\n            \"headers\",\n            \"queryParameters\",\n            \"data\",\n            \"cacheable\"\n        ].indexOf(key) === -1) {\n            data[key] = options[key]; // eslint-disable-line functional/immutable-data\n        }\n    });\n    return {\n        data: Object.entries(data).length > 0 ? data : undefined,\n        timeout: options.timeout || timeout,\n        headers: options.headers || {},\n        queryParameters: options.queryParameters || {},\n        cacheable: options.cacheable\n    };\n}\nconst CallEnum = {\n    /**\r\n     * If the host is read only.\r\n     */ Read: 1,\n    /**\r\n     * If the host is write only.\r\n     */ Write: 2,\n    /**\r\n     * If the host is both read and write.\r\n     */ Any: 3\n};\nconst HostStatusEnum = {\n    Up: 1,\n    Down: 2,\n    Timeouted: 3\n};\n// By default, API Clients at Algolia have expiration delay\n// of 5 mins. In the JavaScript client, we have 2 mins.\nconst EXPIRATION_DELAY = 2 * 60 * 1000;\nfunction createStatefulHost(host, status = HostStatusEnum.Up) {\n    return {\n        ...host,\n        status,\n        lastUpdate: Date.now()\n    };\n}\nfunction isStatefulHostUp(host) {\n    return host.status === HostStatusEnum.Up || Date.now() - host.lastUpdate > EXPIRATION_DELAY;\n}\nfunction isStatefulHostTimeouted(host) {\n    return host.status === HostStatusEnum.Timeouted && Date.now() - host.lastUpdate <= EXPIRATION_DELAY;\n}\nfunction createStatelessHost(options) {\n    if (typeof options === \"string\") {\n        return {\n            protocol: \"https\",\n            url: options,\n            accept: CallEnum.Any\n        };\n    }\n    return {\n        protocol: options.protocol || \"https\",\n        url: options.url,\n        accept: options.accept || CallEnum.Any\n    };\n}\nconst MethodEnum = {\n    Delete: \"DELETE\",\n    Get: \"GET\",\n    Post: \"POST\",\n    Put: \"PUT\"\n};\nfunction createRetryableOptions(hostsCache, statelessHosts) {\n    return Promise.all(statelessHosts.map((statelessHost)=>{\n        return hostsCache.get(statelessHost, ()=>{\n            return Promise.resolve(createStatefulHost(statelessHost));\n        });\n    })).then((statefulHosts)=>{\n        const hostsUp = statefulHosts.filter((host)=>isStatefulHostUp(host));\n        const hostsTimeouted = statefulHosts.filter((host)=>isStatefulHostTimeouted(host));\n        /**\r\n         * Note, we put the hosts that previously timeouted on the end of the list.\r\n         */ const hostsAvailable = [\n            ...hostsUp,\n            ...hostsTimeouted\n        ];\n        const statelessHostsAvailable = hostsAvailable.length > 0 ? hostsAvailable.map((host)=>createStatelessHost(host)) : statelessHosts;\n        return {\n            getTimeout (timeoutsCount, baseTimeout) {\n                /**\r\n                 * Imagine that you have 4 hosts, if timeouts will increase\r\n                 * on the following way: 1 (timeouted) > 4 (timeouted) > 5 (200)\r\n                 *\r\n                 * Note that, the very next request, we start from the previous timeout\r\n                 *\r\n                 *  5 (timeouted) > 6 (timeouted) > 7 ...\r\n                 *\r\n                 * This strategy may need to be reviewed, but is the strategy on the our\r\n                 * current v3 version.\r\n                 */ const timeoutMultiplier = hostsTimeouted.length === 0 && timeoutsCount === 0 ? 1 : hostsTimeouted.length + 3 + timeoutsCount;\n                return timeoutMultiplier * baseTimeout;\n            },\n            statelessHosts: statelessHostsAvailable\n        };\n    });\n}\nconst isNetworkError = ({ isTimedOut, status })=>{\n    return !isTimedOut && ~~status === 0;\n};\nconst isRetryable = (response)=>{\n    const status = response.status;\n    const isTimedOut = response.isTimedOut;\n    return isTimedOut || isNetworkError(response) || ~~(status / 100) !== 2 && ~~(status / 100) !== 4;\n};\nconst isSuccess = ({ status })=>{\n    return ~~(status / 100) === 2;\n};\nconst retryDecision = (response, outcomes)=>{\n    if (isRetryable(response)) {\n        return outcomes.onRetry(response);\n    }\n    if (isSuccess(response)) {\n        return outcomes.onSuccess(response);\n    }\n    return outcomes.onFail(response);\n};\nfunction retryableRequest(transporter, statelessHosts, request, requestOptions) {\n    const stackTrace = []; // eslint-disable-line functional/prefer-readonly-type\n    /**\r\n     * First we prepare the payload that do not depend from hosts.\r\n     */ const data = serializeData(request, requestOptions);\n    const headers = serializeHeaders(transporter, requestOptions);\n    const method = request.method;\n    // On `GET`, the data is proxied to query parameters.\n    const dataQueryParameters = request.method !== MethodEnum.Get ? {} : {\n        ...request.data,\n        ...requestOptions.data\n    };\n    const queryParameters = {\n        \"x-algolia-agent\": transporter.userAgent.value,\n        ...transporter.queryParameters,\n        ...dataQueryParameters,\n        ...requestOptions.queryParameters\n    };\n    let timeoutsCount = 0; // eslint-disable-line functional/no-let\n    const retry = (hosts, getTimeout)=>{\n        /**\r\n         * We iterate on each host, until there is no host left.\r\n         */ const host = hosts.pop(); // eslint-disable-line functional/immutable-data\n        if (host === undefined) {\n            throw createRetryError(stackTraceWithoutCredentials(stackTrace));\n        }\n        const payload = {\n            data,\n            headers,\n            method,\n            url: serializeUrl(host, request.path, queryParameters),\n            connectTimeout: getTimeout(timeoutsCount, transporter.timeouts.connect),\n            responseTimeout: getTimeout(timeoutsCount, requestOptions.timeout)\n        };\n        /**\r\n         * The stackFrame is pushed to the stackTrace so we\r\n         * can have information about onRetry and onFailure\r\n         * decisions.\r\n         */ const pushToStackTrace = (response)=>{\n            const stackFrame = {\n                request: payload,\n                response,\n                host,\n                triesLeft: hosts.length\n            };\n            // eslint-disable-next-line functional/immutable-data\n            stackTrace.push(stackFrame);\n            return stackFrame;\n        };\n        const decisions = {\n            onSuccess: (response)=>deserializeSuccess(response),\n            onRetry (response) {\n                const stackFrame = pushToStackTrace(response);\n                /**\r\n                 * If response is a timeout, we increaset the number of\r\n                 * timeouts so we can increase the timeout later.\r\n                 */ if (response.isTimedOut) {\n                    timeoutsCount++;\n                }\n                return Promise.all([\n                    /**\r\n                     * Failures are individually send the logger, allowing\r\n                     * the end user to debug / store stack frames even\r\n                     * when a retry error does not happen.\r\n                     */ transporter.logger.info(\"Retryable failure\", stackFrameWithoutCredentials(stackFrame)),\n                    /**\r\n                     * We also store the state of the host in failure cases. If the host, is\r\n                     * down it will remain down for the next 2 minutes. In a timeout situation,\r\n                     * this host will be added end of the list of hosts on the next request.\r\n                     */ transporter.hostsCache.set(host, createStatefulHost(host, response.isTimedOut ? HostStatusEnum.Timeouted : HostStatusEnum.Down))\n                ]).then(()=>retry(hosts, getTimeout));\n            },\n            onFail (response) {\n                pushToStackTrace(response);\n                throw deserializeFailure(response, stackTraceWithoutCredentials(stackTrace));\n            }\n        };\n        return transporter.requester.send(payload).then((response)=>{\n            return retryDecision(response, decisions);\n        });\n    };\n    /**\r\n     * Finally, for each retryable host perform request until we got a non\r\n     * retryable response. Some notes here:\r\n     *\r\n     * 1. The reverse here is applied so we can apply a `pop` later on => more performant.\r\n     * 2. We also get from the retryable options a timeout multiplier that is tailored\r\n     * for the current context.\r\n     */ return createRetryableOptions(transporter.hostsCache, statelessHosts).then((options)=>{\n        return retry([\n            ...options.statelessHosts\n        ].reverse(), options.getTimeout);\n    });\n}\nfunction createTransporter(options) {\n    const { hostsCache, logger, requester, requestsCache, responsesCache, timeouts, userAgent, hosts, queryParameters, headers } = options;\n    const transporter = {\n        hostsCache,\n        logger,\n        requester,\n        requestsCache,\n        responsesCache,\n        timeouts,\n        userAgent,\n        headers,\n        queryParameters,\n        hosts: hosts.map((host)=>createStatelessHost(host)),\n        read (request, requestOptions) {\n            /**\r\n             * First, we compute the user request options. Now, keep in mind,\r\n             * that using request options the user is able to modified the intire\r\n             * payload of the request. Such as headers, query parameters, and others.\r\n             */ const mappedRequestOptions = createMappedRequestOptions(requestOptions, transporter.timeouts.read);\n            const createRetryableRequest = ()=>{\n                /**\r\n                 * Then, we prepare a function factory that contains the construction of\r\n                 * the retryable request. At this point, we may *not* perform the actual\r\n                 * request. But we want to have the function factory ready.\r\n                 */ return retryableRequest(transporter, transporter.hosts.filter((host)=>(host.accept & CallEnum.Read) !== 0), request, mappedRequestOptions);\n            };\n            /**\r\n             * Once we have the function factory ready, we need to determine of the\r\n             * request is \"cacheable\" - should be cached. Note that, once again,\r\n             * the user can force this option.\r\n             */ const cacheable = mappedRequestOptions.cacheable !== undefined ? mappedRequestOptions.cacheable : request.cacheable;\n            /**\r\n             * If is not \"cacheable\", we immediatly trigger the retryable request, no\r\n             * need to check cache implementations.\r\n             */ if (cacheable !== true) {\n                return createRetryableRequest();\n            }\n            /**\r\n             * If the request is \"cacheable\", we need to first compute the key to ask\r\n             * the cache implementations if this request is on progress or if the\r\n             * response already exists on the cache.\r\n             */ const key = {\n                request,\n                mappedRequestOptions,\n                transporter: {\n                    queryParameters: transporter.queryParameters,\n                    headers: transporter.headers\n                }\n            };\n            /**\r\n             * With the computed key, we first ask the responses cache\r\n             * implemention if this request was been resolved before.\r\n             */ return transporter.responsesCache.get(key, ()=>{\n                /**\r\n                 * If the request has never resolved before, we actually ask if there\r\n                 * is a current request with the same key on progress.\r\n                 */ return transporter.requestsCache.get(key, ()=>{\n                    return transporter.requestsCache/**\r\n                         * Finally, if there is no request in progress with the same key,\r\n                         * this `createRetryableRequest()` will actually trigger the\r\n                         * retryable request.\r\n                         */ .set(key, createRetryableRequest()).then((response)=>Promise.all([\n                            transporter.requestsCache.delete(key),\n                            response\n                        ]), (err)=>Promise.all([\n                            transporter.requestsCache.delete(key),\n                            Promise.reject(err)\n                        ])).then(([_, response])=>response);\n                });\n            }, {\n                /**\r\n                 * Of course, once we get this response back from the server, we\r\n                 * tell response cache to actually store the received response\r\n                 * to be used later.\r\n                 */ miss: (response)=>transporter.responsesCache.set(key, response)\n            });\n        },\n        write (request, requestOptions) {\n            /**\r\n             * On write requests, no cache mechanisms are applied, and we\r\n             * proxy the request immediately to the requester.\r\n             */ return retryableRequest(transporter, transporter.hosts.filter((host)=>(host.accept & CallEnum.Write) !== 0), request, createMappedRequestOptions(requestOptions, transporter.timeouts.write));\n        }\n    };\n    return transporter;\n}\nfunction createUserAgent(version) {\n    const userAgent = {\n        value: `Algolia for JavaScript (${version})`,\n        add (options) {\n            const addedUserAgent = `; ${options.segment}${options.version !== undefined ? ` (${options.version})` : \"\"}`;\n            if (userAgent.value.indexOf(addedUserAgent) === -1) {\n                // eslint-disable-next-line functional/immutable-data\n                userAgent.value = `${userAgent.value}${addedUserAgent}`;\n            }\n            return userAgent;\n        }\n    };\n    return userAgent;\n}\nfunction deserializeSuccess(response) {\n    // eslint-disable-next-line functional/no-try-statement\n    try {\n        return JSON.parse(response.content);\n    } catch (e) {\n        throw createDeserializationError(e.message, response);\n    }\n}\nfunction deserializeFailure({ content, status }, stackFrame) {\n    // eslint-disable-next-line functional/no-let\n    let message = content;\n    // eslint-disable-next-line functional/no-try-statement\n    try {\n        message = JSON.parse(content).message;\n    } catch (e) {\n    // ..\n    }\n    return createApiError(message, status, stackFrame);\n}\nfunction serializeUrl(host, path, queryParameters) {\n    const queryParametersAsString = serializeQueryParameters(queryParameters);\n    // eslint-disable-next-line functional/no-let\n    let url = `${host.protocol}://${host.url}/${path.charAt(0) === \"/\" ? path.substr(1) : path}`;\n    if (queryParametersAsString.length) {\n        url += `?${queryParametersAsString}`;\n    }\n    return url;\n}\nfunction serializeQueryParameters(parameters) {\n    const isObjectOrArray = (value)=>Object.prototype.toString.call(value) === \"[object Object]\" || Object.prototype.toString.call(value) === \"[object Array]\";\n    return Object.keys(parameters).map((key)=>encode(\"%s=%s\", key, isObjectOrArray(parameters[key]) ? JSON.stringify(parameters[key]) : parameters[key])).join(\"&\");\n}\nfunction serializeData(request, requestOptions) {\n    if (request.method === MethodEnum.Get || request.data === undefined && requestOptions.data === undefined) {\n        return undefined;\n    }\n    const data = Array.isArray(request.data) ? request.data : {\n        ...request.data,\n        ...requestOptions.data\n    };\n    return JSON.stringify(data);\n}\nfunction serializeHeaders(transporter, requestOptions) {\n    const headers = {\n        ...transporter.headers,\n        ...requestOptions.headers\n    };\n    const serializedHeaders = {};\n    Object.keys(headers).forEach((header)=>{\n        const value = headers[header];\n        // @ts-ignore\n        // eslint-disable-next-line functional/immutable-data\n        serializedHeaders[header.toLowerCase()] = value;\n    });\n    return serializedHeaders;\n}\nfunction stackTraceWithoutCredentials(stackTrace) {\n    return stackTrace.map((stackFrame)=>stackFrameWithoutCredentials(stackFrame));\n}\nfunction stackFrameWithoutCredentials(stackFrame) {\n    const modifiedHeaders = stackFrame.request.headers[\"x-algolia-api-key\"] ? {\n        \"x-algolia-api-key\": \"*****\"\n    } : {};\n    return {\n        ...stackFrame,\n        request: {\n            ...stackFrame.request,\n            headers: {\n                ...stackFrame.request.headers,\n                ...modifiedHeaders\n            }\n        }\n    };\n}\nfunction createApiError(message, status, transporterStackTrace) {\n    return {\n        name: \"ApiError\",\n        message,\n        status,\n        transporterStackTrace\n    };\n}\nfunction createDeserializationError(message, response) {\n    return {\n        name: \"DeserializationError\",\n        message,\n        response\n    };\n}\nfunction createRetryError(transporterStackTrace) {\n    return {\n        name: \"RetryError\",\n        message: \"Unreachable hosts - your application id may be incorrect. If the error persists, contact support@algolia.com.\",\n        transporterStackTrace\n    };\n}\nconst createSearchClient = (options)=>{\n    const appId = options.appId;\n    const auth = createAuth(options.authMode !== undefined ? options.authMode : AuthMode.WithinHeaders, appId, options.apiKey);\n    const transporter = createTransporter({\n        hosts: [\n            {\n                url: `${appId}-dsn.algolia.net`,\n                accept: CallEnum.Read\n            },\n            {\n                url: `${appId}.algolia.net`,\n                accept: CallEnum.Write\n            }\n        ].concat(shuffle([\n            {\n                url: `${appId}-1.algolianet.com`\n            },\n            {\n                url: `${appId}-2.algolianet.com`\n            },\n            {\n                url: `${appId}-3.algolianet.com`\n            }\n        ])),\n        ...options,\n        headers: {\n            ...auth.headers(),\n            ...{\n                \"content-type\": \"application/x-www-form-urlencoded\"\n            },\n            ...options.headers\n        },\n        queryParameters: {\n            ...auth.queryParameters(),\n            ...options.queryParameters\n        }\n    });\n    const base = {\n        transporter,\n        appId,\n        addAlgoliaAgent (segment, version) {\n            transporter.userAgent.add({\n                segment,\n                version\n            });\n        },\n        clearCache () {\n            return Promise.all([\n                transporter.requestsCache.clear(),\n                transporter.responsesCache.clear()\n            ]).then(()=>undefined);\n        }\n    };\n    return addMethods(base, options.methods);\n};\nconst customRequest = (base)=>{\n    return (request, requestOptions)=>{\n        if (request.method === MethodEnum.Get) {\n            return base.transporter.read(request, requestOptions);\n        }\n        return base.transporter.write(request, requestOptions);\n    };\n};\nconst initIndex = (base)=>{\n    return (indexName, options = {})=>{\n        const searchIndex = {\n            transporter: base.transporter,\n            appId: base.appId,\n            indexName\n        };\n        return addMethods(searchIndex, options.methods);\n    };\n};\nconst multipleQueries = (base)=>{\n    return (queries, requestOptions)=>{\n        const requests = queries.map((query)=>{\n            return {\n                ...query,\n                params: serializeQueryParameters(query.params || {})\n            };\n        });\n        return base.transporter.read({\n            method: MethodEnum.Post,\n            path: \"1/indexes/*/queries\",\n            data: {\n                requests\n            },\n            cacheable: true\n        }, requestOptions);\n    };\n};\nconst multipleSearchForFacetValues = (base)=>{\n    return (queries, requestOptions)=>{\n        return Promise.all(queries.map((query)=>{\n            const { facetName, facetQuery, ...params } = query.params;\n            return initIndex(base)(query.indexName, {\n                methods: {\n                    searchForFacetValues\n                }\n            }).searchForFacetValues(facetName, facetQuery, {\n                ...requestOptions,\n                ...params\n            });\n        }));\n    };\n};\nconst findAnswers = (base)=>{\n    return (query, queryLanguages, requestOptions)=>{\n        return base.transporter.read({\n            method: MethodEnum.Post,\n            path: encode(\"1/answers/%s/prediction\", base.indexName),\n            data: {\n                query,\n                queryLanguages\n            },\n            cacheable: true\n        }, requestOptions);\n    };\n};\nconst search = (base)=>{\n    return (query, requestOptions)=>{\n        return base.transporter.read({\n            method: MethodEnum.Post,\n            path: encode(\"1/indexes/%s/query\", base.indexName),\n            data: {\n                query\n            },\n            cacheable: true\n        }, requestOptions);\n    };\n};\nconst searchForFacetValues = (base)=>{\n    return (facetName, facetQuery, requestOptions)=>{\n        return base.transporter.read({\n            method: MethodEnum.Post,\n            path: encode(\"1/indexes/%s/facets/%s/query\", base.indexName, facetName),\n            data: {\n                facetQuery\n            },\n            cacheable: true\n        }, requestOptions);\n    };\n};\nconst LogLevelEnum = {\n    Debug: 1,\n    Info: 2,\n    Error: 3\n};\n/* eslint no-console: 0 */ function createConsoleLogger(logLevel) {\n    return {\n        debug (message, args) {\n            if (LogLevelEnum.Debug >= logLevel) {\n                console.debug(message, args);\n            }\n            return Promise.resolve();\n        },\n        info (message, args) {\n            if (LogLevelEnum.Info >= logLevel) {\n                console.info(message, args);\n            }\n            return Promise.resolve();\n        },\n        error (message, args) {\n            console.error(message, args);\n            return Promise.resolve();\n        }\n    };\n}\nfunction createBrowserXhrRequester() {\n    return {\n        send (request) {\n            return new Promise((resolve)=>{\n                const baseRequester = new XMLHttpRequest();\n                baseRequester.open(request.method, request.url, true);\n                Object.keys(request.headers).forEach((key)=>baseRequester.setRequestHeader(key, request.headers[key]));\n                const createTimeout = (timeout, content)=>{\n                    return setTimeout(()=>{\n                        baseRequester.abort();\n                        resolve({\n                            status: 0,\n                            content,\n                            isTimedOut: true\n                        });\n                    }, timeout * 1000);\n                };\n                const connectTimeout = createTimeout(request.connectTimeout, \"Connection timeout\");\n                // eslint-disable-next-line functional/no-let\n                let responseTimeout;\n                // eslint-disable-next-line functional/immutable-data\n                baseRequester.onreadystatechange = ()=>{\n                    if (baseRequester.readyState > baseRequester.OPENED && responseTimeout === undefined) {\n                        clearTimeout(connectTimeout);\n                        responseTimeout = createTimeout(request.responseTimeout, \"Socket timeout\");\n                    }\n                };\n                // eslint-disable-next-line functional/immutable-data\n                baseRequester.onerror = ()=>{\n                    // istanbul ignore next\n                    if (baseRequester.status === 0) {\n                        clearTimeout(connectTimeout);\n                        clearTimeout(responseTimeout);\n                        resolve({\n                            content: baseRequester.responseText || \"Network request failed\",\n                            status: baseRequester.status,\n                            isTimedOut: false\n                        });\n                    }\n                };\n                //  eslint-disable-next-line functional/immutable-data\n                baseRequester.onload = ()=>{\n                    clearTimeout(connectTimeout);\n                    clearTimeout(responseTimeout);\n                    resolve({\n                        content: baseRequester.responseText,\n                        status: baseRequester.status,\n                        isTimedOut: false\n                    });\n                };\n                baseRequester.send(request.data);\n            });\n        }\n    };\n}\nfunction algoliasearch(appId, apiKey, options) {\n    const commonOptions = {\n        appId,\n        apiKey,\n        timeouts: {\n            connect: 1,\n            read: 2,\n            write: 30\n        },\n        requester: createBrowserXhrRequester(),\n        logger: createConsoleLogger(LogLevelEnum.Error),\n        responsesCache: createInMemoryCache(),\n        requestsCache: createInMemoryCache({\n            serializable: false\n        }),\n        hostsCache: createFallbackableCache({\n            caches: [\n                createBrowserLocalStorageCache({\n                    key: `${version}-${appId}`\n                }),\n                createInMemoryCache()\n            ]\n        }),\n        userAgent: createUserAgent(version).add({\n            segment: \"Browser\",\n            version: \"lite\"\n        }),\n        authMode: AuthMode.WithinQueryParameters\n    };\n    return createSearchClient({\n        ...commonOptions,\n        ...options,\n        methods: {\n            search: multipleQueries,\n            searchForFacetValues: multipleSearchForFacetValues,\n            multipleQueries,\n            multipleSearchForFacetValues,\n            customRequest,\n            initIndex: (base)=>(indexName)=>{\n                    return initIndex(base)(indexName, {\n                        methods: {\n                            search,\n                            searchForFacetValues,\n                            findAnswers\n                        }\n                    });\n                }\n        }\n    });\n}\n// eslint-disable-next-line functional/immutable-data\nalgoliasearch.version = version;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (algoliasearch);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algoliasearch/dist/algoliasearch-lite.esm.browser.js\n");

/***/ })

};
;